#! /usr/bin/env perl
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
use common::sense;

use File::Basename;
use lib dirname(__FILE__) . '/../../../lib/perl';
use OVH::Result;
use OVH::Bastion;
use OVH::Bastion::Plugin qw( :DEFAULT help );

OVH::Bastion::Plugin::begin(
    argv     => \@ARGV,
    header   => "realm information",
    options  => {'realm=s' => \my $pRealm},
    helptext => <<'EOF',
Display information about a bastion realm

Usage: --osh SCRIPT_NAME --realm REALM

  --realm REALM  Name of the realm to show info about
EOF
);

my $fnret;

if (!$pRealm) {
    help();
    osh_exit R('ERR_MISSING_PARAMETER', msg => "Missing argument 'realm'");
}

my $RealmSupportAccount = OVH::Bastion::Account->newFromName("realm_$pRealm", type => "realm", check => 1);
$RealmSupportAccount or osh_exit($RealmSupportAccount);

$fnret = $RealmSupportAccount->getRemoteAccountsNames();
$fnret or osh_exit $fnret;

my @accounts = sort @{$fnret->value};
my %details;

if (@accounts) {
    osh_info "The following accounts from realm ".$RealmSupportAccount->realm." are known:";
    foreach my $account (@accounts) {
        my $RemoteAccount = OVH::Bastion::Account->newFromName($account, check => 1);
        $RemoteAccount or next;

        $fnret = $RemoteAccount->getAllAcls();
        my $nb = $fnret ? scalar(@{$fnret->value}) : "?";
        $details{$RemoteAccount->name} = {accesses => ($fnret ? scalar(@{$fnret->value}) : undef)};
        osh_info sprintf("- %-18s [%s accesses]", $RemoteAccount->name, $nb);
    }
    osh_info("\nTo get their access list, use --osh accountListAccesses --account "
          . $RealmSupportAccount->realm
          . "/account_name_here");
}
else {
    osh_info("No remote accounts from realm " . $RealmSupportAccount->realm . " have accesses yet.");
}

osh_ok({realm => $RealmSupportAccount->realm, accounts => \@accounts, account_details => \%details});
