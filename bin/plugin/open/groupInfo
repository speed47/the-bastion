#! /usr/bin/env perl
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
use common::sense;
use Term::ANSIColor;
use POSIX qw{ strftime };

use File::Basename;
use lib dirname(__FILE__) . '/../../../lib/perl';
use OVH::Result;
use OVH::Bastion;
use OVH::Bastion::Plugin qw( :DEFAULT help );

my $remainingOptions = OVH::Bastion::Plugin::begin(
    argv     => \@ARGV,
    header   => "group info",
    options  => {'group=s' => \my $group},
    helptext => <<'EOF',
Print some basic information about a group

Usage: --osh SCRIPT_NAME --group GROUP

  --group GROUP  specify the group to display the infos of
EOF
);

if (!$group) {
    help();
    osh_exit 'ERR_MISSING_PARAMETER', "Missing 'group' parameter";
}

my $Group = OVH::Bastion::Group->newFromName($group, check => 1);
$Group or osh_exit($Group);

my $fnret;
my $result = {group => $Group->name};

$fnret = $Group->getMembers();
$fnret or return $fnret;
$result->{'members'} = $fnret->value;

$fnret = $Group->getGuests();
$fnret or return $fnret;
$result->{'guests'} = $fnret->value;

$fnret = $Group->getOwners();
$fnret or return $fnret;
$result->{'owners'}      = $fnret->value;

$fnret = $Group->getGatekeepers();
$fnret or return $fnret;
$result->{'gatekeepers'} = $fnret->value;

$fnret = $Group->getAclkeepers();
$fnret or return $fnret;
$result->{'aclkeepers'}  = $fnret->value;

osh_info "Group "
  . $Group->name
  . "'s Owners are: "
  . colored(@{$result->{'owners'}} ? join(" ", sort @{$result->{'owners'}}) : '-', "red");
osh_info "Group "
  . $Group->name
  . "'s GateKeepers (managing the members/guests list) are: "
  . colored(@{$result->{'gatekeepers'}} ? join(" ", sort @{$result->{'gatekeepers'}}) : '-', "red");
if ($Group->hasOwner($Self, superowner => 1)
    || $Group->hasGatekeeper($Self)
    || $Group->hasAclkeeper($Self)
    || $Group->hasMember($Self)
    || $Self->isAuditor)
{

    osh_info "Group "
      . $Group->name
      . "'s ACLKeepers (managing the group servers list) are: "
      . colored(@{$result->{'aclkeepers'}} ? join(" ", sort @{$result->{'aclkeepers'}}) : '-', "red");

    osh_info "Group "
      . $Group->name
      . "'s Members (with access to ALL the group servers) are: "
      . colored(@{$result->{'members'}} ? join(" ", sort @{$result->{'members'}}) : '-', "red");

    my %guest_details;
    my @guest_text;
    my @filtered_guests;
    foreach my $guest (sort @{$result->{'guests'}}) {
        $fnret = OVH::Bastion::get_acl_way(way => 'groupguest', group => $Group->name, account => $guest);

        # for realms, don't show remote accounts with zero accesses, this could be confusing
        next if ($guest =~ m{/} && $fnret && @{$fnret->value} == 0);
        $guest_details{$guest} = $fnret ? scalar(@{$fnret->value}) : '?';
        push @guest_text,      $guest . "[" . $guest_details{$guest} . "]";
        push @filtered_guests, $guest;
    }
    osh_info "Group "
      . $Group->name
      . "'s Guests (with access to SOME of the group servers) are: "
      . colored(@filtered_guests ? join(" ", @guest_text) : '-', "red");

    $result->{'guests'}          = \@filtered_guests;
    $result->{'guests_accesses'} = \%guest_details;

    my @inactive;
    foreach my $account (@{$result->{'members'}}) {
        my $Account = OVH::Bastion::Account->newFromName($account);
        if ($Account && $Account->isExisting && $Account->isActive->is_ko) {
            push @inactive, $account;
        }
    }
    if (@inactive) {
        osh_info "For your information, the following accounts are inactive: " . colored(join(" ", @inactive), "blue");
        $result->{'inactive'} = \@inactive;
    }

    # policies
    $fnret = OVH::Bastion::group_config(group => $group, key => 'mfa_required');
    if ($fnret && $fnret->value eq 'password') {
        osh_warn
          "MFA Required: when connecting to servers of this group, users will be asked for an additional authentication factor (password)";
    }
    elsif ($fnret && $fnret->value eq 'totp') {
        osh_warn
          "MFA Required: when connecting to servers of this group, users will be asked for an additional authentication factor (TOTP)";
    }
    elsif ($fnret && $fnret->value eq 'any') {
        osh_warn
          "MFA Required: When connecting to servers of this group, users will be asked for an additional authentication factor";
    }
    if ($fnret && $fnret->value ne 'none') {
        $result->{'mfa_required'} = $fnret->value;
    }

    $fnret = OVH::Bastion::group_config(group => $group, key => 'guest_ttl_limit');
    if ($fnret && defined $fnret->value && $fnret->value =~ /^\d+$/) {
        osh_warn "Guest TTL enforced: guest accesses must have a TTL with a maximum duration of "
          . OVH::Bastion::duration2human(seconds => $fnret->value)->value->{'duration'};
        $result->{'guest_ttl_limit'} = $fnret->value;
    }

    $fnret = OVH::Bastion::group_config(group => $group, %{OVH::Bastion::OPT_GROUP_IDLE_KILL_TIMEOUT()});
    if ($fnret && defined $fnret->value && $fnret->value =~ /^-?\d+$/) {
        if ($fnret->value == 0) {
            osh_warn "Specific idle kill timeout: idle sessions on servers of this group will NOT be cut";
        }
        else {
            osh_warn "Specific idle kill timeout: idle sessions on servers of this group will be cut after "
              . OVH::Bastion::duration2human(seconds => $fnret->value)->value->{'duration'};
        }
        $result->{'idle_kill_timeout'} = $fnret->value;
    }

    $fnret = OVH::Bastion::group_config(group => $group, => %{OVH::Bastion::OPT_GROUP_IDLE_LOCK_TIMEOUT()});
    if ($fnret && defined $fnret->value && $fnret->value =~ /^-?\d+$/) {
        if ($fnret->value == 0) {
            osh_warn "Specific idle lock timeout: idle sessions on servers of this group will NOT be locked";
        }
        else {
            osh_warn "Specific idle lock timeout: idle sessions on servers of this group will be locked after "
              . OVH::Bastion::duration2human(seconds => $fnret->value)->value->{'duration'};
        }
        $result->{'idle_lock_timeout'} = $fnret->value;
    }
}
else {
    osh_info "You should ask him/her/them if you think you need access for your work tasks.";
}

# get pubkeys with the proper from='' and show them

$fnret = OVH::Bastion::get_bastion_ips();
my $from;
if ($fnret) {
    my @ips = @{$fnret->value};
    $from = 'from="' . join(',', @ips) . '"';
}

$fnret = $Group->getKeys();
if ($fnret and $from) {
    osh_info ' ';
    if ($fnret->value && !@{$fnret->value->{'sortedKeys'}}) {
        osh_info "This group has no SSH egress key, the owner may use groupGenerateEgressKey to generate one.";
    }
    elsif (@{$fnret->value->{'sortedKeys'}} == 1) {
        osh_info "The public key of this group is:";
    }
    else {
        osh_info "The public keys of this group are:";
    }
    osh_info ' ';
    foreach my $keyfile (@{$fnret->value->{'sortedKeys'}}) {
        my $key = $fnret->value->{'keys'}{$keyfile};
        $key->{'prefix'} = $from;
        OVH::Bastion::print_public_key(key => $key);
        $result->{'keys'}{$key->{'fingerprint'}} = $key;
    }
}

osh_ok $result;
