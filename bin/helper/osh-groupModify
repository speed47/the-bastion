#! /usr/bin/perl -T
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
# KEYSUDOERS # as an owner, we can modify the group settings
# KEYSUDOERS SUPEROWNERS, %%GROUP%-owner      ALL=(%GROUP%)     NOPASSWD: /usr/bin/env perl -T %BASEPATH%/bin/helper/osh-groupModify --group %GROUP% *
# FILEMODE 0755
# FILEOWN 0 0

#>HEADER
use common::sense;
use Getopt::Long qw(:config no_auto_abbrev no_ignore_case);

use File::Basename;
use lib dirname(__FILE__) . '/../../lib/perl';
use OVH::Bastion;
use OVH::Bastion::Helper;
use OVH::Result;

# Fetch command options
my $fnret;
my ($result, @optwarns);
my ($group, $mfaRequired, $ttl, $idleLockTimeout, $idleKillTimeout);
eval {
    local $SIG{__WARN__} = sub { push @optwarns, shift };
    $result = GetOptions(
        "group=s"             => sub { $group //= $_[1] },
        "mfa-required=s"      => \$mfaRequired,
        "guest-ttl-limit=i"   => \$ttl,
        "idle-lock-timeout=i" => \$idleLockTimeout,
        "idle-kill-timeout=i" => \$idleKillTimeout,
    );
};
if ($@) { die $@ }

if (!$result) {
    local $" = ", ";
    HEXIT('ERR_BAD_OPTIONS', msg => "Error parsing options: @optwarns");
}

OVH::Bastion::Helper::check_spurious_args();

if (!$group) {
    HEXIT('ERR_MISSING_PARAMETER', msg => "Missing argument 'group'");
}

if (!$mfaRequired && !defined $ttl && !defined $idleLockTimeout && !defined $idleKillTimeout) {
    HEXIT('ERR_MISSING_PARAMETER',
        msg => "Missing argument 'mfa-required', 'guest-ttl-limit', 'idle-lock-timeout' or 'idle-kill-timeout'");
}

#<HEADER

my $Group = OVH::Bastion::Group->newFromSysGroup($group, check => 1);
$Group or HEXIT($Group);

if ($Self->isLocalRoot) {
    osh_debug "Real root, skipping checks of permissions";
}
else {
    $fnret = $Group->hasOwner($Self, superowner => 1);
    if (!$fnret) {
        HEXIT('ERR_SECURITY_VIOLATION', msg => "You're not allowed to run this, dear $Self");
    }
}

#>CODE
my %result;

if (defined $mfaRequired) {
    osh_info "Modifying mfa-required policy of group...";
    if (grep { $mfaRequired eq $_ } qw{ password totp any none }) {
        $fnret = $Group->setConfig("mfa_required" => $mfaRequired);
        if ($fnret) {
            osh_info "... done, policy is now: $mfaRequired";
        }
        else {
            osh_warn "... error while changing mfa-required policy ($fnret)";
        }
        $result{'mfa_required'} = $fnret;
    }
    else {
        osh_warn "... invalid option '$mfaRequired'";
        $result{'mfa_required'} = R('ERR_INVALID_PARAMETER');
    }
}

my %idleTimeout = (
    lock => {
        name  => "idle lock timeout",
        key   => 'idle_lock_timeout',
        value => $idleLockTimeout,
    },
    kill => {
        name  => "idle kill timeout",
        key   => "idle_kill_timeout",
        value => $idleKillTimeout,
    },
);

foreach my $item (keys %idleTimeout) {
    next if !defined $idleTimeout{$item}{'value'};

    my $name = $idleTimeout{$item}{'name'};
    osh_info "Modifying $name policy of group...";

    if ($idleTimeout{$item}{'value'} >= 0) {
        $fnret = $Group->setConfig($idleTimeout{$item}{'key'} => $idleTimeout{$item}{'value'});
        if ($fnret) {
            if ($idleTimeout{$item}{'value'} == 0) {
                osh_info "... done, this group's $name policy is now set to: disabled";
            }
            else {
                osh_info "... done, this group is now configured to use a $name policy of "
                  . OVH::Bastion::duration2human(seconds => $idleTimeout{$item}{'value'})->value->{'human'};
            }
        }
        else {
            osh_warn "... error while setting the group-specific $name policy ($fnret)";
            warn_syslog "Error setting the group-specific $name policy of $Group ($fnret)";
        }
    }
    else {
        $fnret = $Group->deleteConfig($idleTimeout{$item}{'key'});
        if ($fnret) {
            osh_info "... done, this group will now use the global $name policy";
        }
        else {
            osh_warn "... error while removing the group-specific $name policy ($fnret)";
            warn_syslog "Error removing the group-specific $name policy of $Group ($fnret)";
        }
    }
    $result{$idleTimeout{$item}{'key'}} = $fnret;
}

if (defined $ttl) {
    osh_info "Modifying guest TTL limit policy of group...";
    if ($ttl > 0) {
        $fnret = $Group->setConfig("guest_ttl_limit" => $ttl);
        if ($fnret) {
            osh_info "... done, guest accesses must now have a TTL set on creation, with maximum allowed duration of "
              . OVH::Bastion::duration2human(seconds => $ttl)->value->{'human'};
        }
        else {
            osh_warn "... error while setting guest-ttl-limit ($fnret)";
        }
    }
    else {
        $fnret = $Group->deleteConfig("guest_ttl_limit");
        if ($fnret) {
            osh_info "... done, guest accesses no longer need to have a TTL set";
        }
        else {
            osh_warn "... error while removing guest-ttl-limit ($fnret)";
        }
    }
    $result{'guest_ttl_limit'} = $fnret;
}

HEXIT('OK', value => \%result);
