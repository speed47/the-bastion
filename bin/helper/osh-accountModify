#! /usr/bin/perl -T
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
# NEEDGROUP osh-accountModify
# SUDOERS # modify parameters/policy of an account
# SUDOERS %osh-accountModify ALL=(root) NOPASSWD:/usr/bin/env perl -T /opt/bastion/bin/helper/osh-accountModify *
# FILEMODE 0700
# FILEOWN 0 0

#>HEADER
use common::sense;
use Getopt::Long qw(:config no_auto_abbrev no_ignore_case);

use File::Basename;
use lib dirname(__FILE__) . '/../../lib/perl';
use OVH::Bastion;
use OVH::Bastion::Helper;
use OVH::Result;

# Fetch command options
my $fnret;
my ($result,  @optwarns);
my ($account, @modify);
eval {
    local $SIG{__WARN__} = sub { push @optwarns, shift };
    $result = GetOptions(
        "account=s" => sub { $account //= $_[1] },
        "modify=s"  => \@modify,
    );
};
if ($@) { die $@ }

if (!$result) {
    local $" = ", ";
    HEXIT('ERR_BAD_OPTIONS', msg => "Error parsing options: @optwarns");
}

OVH::Bastion::Helper::check_spurious_args();

if (!$account || !@modify) {
    HEXIT('ERR_MISSING_PARAMETER', msg => "Missing argument 'account' or 'modify'");
}

#<HEADER

#>PARAMS:ACCOUNT
osh_debug("Checking account");
my $Account = OVH::Bastion::Account->newFromName($account, check => 1);
$Account or HEXIT($Account);
#<PARAMS:ACCOUNT

#>RIGHTSCHECK
if ($Self->isLocalRoot) {
    osh_debug "Real root, skipping checks of permissions";
}
elsif (!OVH::Bastion::is_user_in_group(user => $Self->sysUser, group => "osh-accountModify")) {
    HEXIT('ERR_SECURITY_VIOLATION', msg => "You're not allowed to run this, dear $Self");
}

if ($Self->isAdmin && !$Account->isAdmin) {
    ('ERR_SECURITY_VIOLATION', msg => "You can't modify the account of an admin without being admin yourself");
}

#<RIGHTSCHECK

#>CODE
my %result;
my $nbErrors = 0;

# the TOTP and UNIX Password toggle codes are extremely similar, factorize it here
sub _mfa_toggle {
    my ($key, $value, $mfaName, $mfaGroup, $mfaGroupBypass) = @_;
    my $jsonkey = $key;
    $jsonkey =~ s/-/_/g;

    # if the value is != bypass, remove the account from the bypass group
    if ($value ne 'bypass') {
        if (OVH::Bastion::is_user_in_group(user => $Account->sysUser, group => $mfaGroupBypass)) {
            $fnret = OVH::Bastion::sys_delmemberfromgroup(
                user         => $Account->sysUser,
                group        => $mfaGroupBypass,
                noisy_stderr => 1
            );
            if (!$fnret) {
                osh_warn "... error while removing the bypass option for this account";
                $result{$jsonkey} = R('ERR_REMOVING_FROM_GROUP');
                $nbErrors++;
                return;
            }
        }
    }

    # if the value is == bypass, remove the account from the required group
    elsif ($value eq 'bypass') {
        if (OVH::Bastion::is_user_in_group(user => $Account->sysUser, group => $mfaGroup)) {
            $fnret =
              OVH::Bastion::sys_delmemberfromgroup(user => $Account->sysUser, group => $mfaGroup, noisy_stderr => 1);
            if (!$fnret) {
                osh_warn "... error while removing the required option for this account";
                $result{$jsonkey} = R('ERR_REMOVING_FROM_GROUP');
                $nbErrors++;
                return;
            }
        }
    }

    $fnret = OVH::Bastion::is_user_in_group(user => $Account->sysUser, group => $mfaGroup);
    if ($value eq 'yes') {
        osh_info "Enforcing multi-factor authentication of type $mfaName for this account...";
        if ($fnret) {
            osh_info "... no change was required";
            $result{$jsonkey} = R('OK_NO_CHANGE');
            return;
        }

        $fnret = OVH::Bastion::sys_addmembertogroup(user => $Account->sysUser, group => $mfaGroup, noisy_stderr => 1);
        if (!$fnret) {
            osh_warn "... error while setting the enforce option";
            $result{$jsonkey} = R('ERR_ADDING_TO_GROUP');
            $nbErrors++;
            return;
        }

        osh_info("... done, this account is now required to setup a password with --osh selfMFASetup$mfaName ",
            "on the next connection, before being allowed to do anything else");
        $result{$jsonkey} = R('OK');
    }
    elsif ($value eq 'no') {
        osh_info "Removing multi-factor authentication of type $mfaName requirement for this account...";
        if (!$fnret) {
            osh_info "... no change was required";
            $result{$jsonkey} = R('OK_NO_CHANGE');
            return;
        }

        $fnret = OVH::Bastion::sys_delmemberfromgroup(user => $Account->sysUser, group => $mfaGroup, noisy_stderr => 1);
        if (!$fnret) {
            osh_warn "... error while setting the enforce option";
            $result{$jsonkey} = R('ERR_REMOVING_FROM_GROUP');
            $nbErrors++;
            return;
        }

        osh_info(
            "... done, this account is no longer required to setup a password, however if there's already ",
            "a password configured, it'll still be required (if this is not expected, the password can be reset ",
            "with --osh accountMFAResetPassword command)"
        );
        $result{$jsonkey} = R('OK');
    }
    elsif ($value eq 'bypass') {
        osh_info "Bypassing multi-factor authentication of type $mfaName requirement for this account...";
        $fnret = OVH::Bastion::is_user_in_group(user => $Account->sysUser, group => $mfaGroupBypass);
        if ($fnret) {
            osh_info "... no change was required";
            $result{$jsonkey} = R('OK_NO_CHANGE');
            return;
        }

        $fnret =
          OVH::Bastion::sys_addmembertogroup(user => $Account->sysUser, group => $mfaGroupBypass, noisy_stderr => 1);
        if (!$fnret) {
            osh_warn "... error while setting the enforce option";
            $result{$jsonkey} = R('ERR_ADDING_TO_GROUP');
            $nbErrors++;
            return;
        }

        osh_info(
            "... done, this account will no longer have to setup a password, even if this is enforced ",
            "by the default global policy.\n",
            "However if there's already a password configured, it'll still be required (if this is not expected, ",
            "the password can be reset with --osh accountMFAResetPassword command)"
        );
        $result{$jsonkey} = R('OK');
    }
    return;
}

sub _toggle_yes_no {
    my %p = @_;
    $fnret = OVH::Bastion::check_args(\%p, mandatory => [qw{ compositeKey keyname value }],);
    $fnret or return $fnret;

    my $keyname = $p{'keyname'};

    $fnret = $Account->getConfig($p{'compositeKey'});
    if ($p{'value'} eq 'yes') {
        osh_info "Setting this account as $keyname...";
        if ($fnret) {
            osh_info "... no change was required";
            return R('OK_NO_CHANGE');
        }

        $fnret = $Account->setConfig($p{'compositeKey'} => 'yes');
        if (!$fnret) {
            osh_warn "... error while setting the option";
            $nbErrors++;
            return R('ERR_OPTION_CHANGE_FAILED');
        }

        osh_info "... done, this account is now $keyname";
        return R('OK');
    }
    elsif ($p{'value'} eq 'no') {
        osh_info "Removing the $keyname flag from this account...";
        if (!$fnret) {
            osh_info "... no change was required";
            return R('OK_NO_CHANGE');
        }

        $fnret = $Account->deleteConfig($p{'compositeKey'});
        if (!$fnret) {
            osh_warn "... error while removing the option";
            $nbErrors++;
            return R('ERR_OPTION_CHANGE_FAILED');
        }

        osh_info "... done, this account has no longer the $keyname flag set";
        return R('OK');
    }
    else {
        $nbErrors++;
        return R('ERR_INVALID_PARAMETER', msg => "Invalid value for " . $p{'compositeKey'});
    }
}

foreach my $tuple (@modify) {
    my ($key, $value) = $tuple =~ /^([a-zA-Z0-9-]+)=([a-zA-Z0-9-]+)$/;
    next if (!$key || !defined $value);
    my $jsonkey = $key;
    $jsonkey =~ s/-/_/g;

    osh_debug "working on tuple key=$key value=$value";
    if ($key eq 'always-active') {
        $result{$jsonkey} = _toggle_yes_no(
            keyname      => 'always-active',
            compositeKey => "public/always_active",
            value        => $value,
        );
    }
    elsif ($key eq 'idle-ignore') {
        $result{$jsonkey} = _toggle_yes_no(
            keyname      => 'idle-ignore',
            compositeKey => "public/idle_ignore",
            value        => $value,
        );
    }
    elsif ($key eq 'osh-only') {
        $result{$jsonkey} = _toggle_yes_no(
            keyname      => 'osh-only',
            value        => $value,
            compositeKey => "private/osh_only",
        );
    }
    elsif ($key eq 'pam-auth-bypass') {
        $fnret =
          OVH::Bastion::is_user_in_group(user => $Account->sysUser, group => OVH::Bastion::PAM_AUTH_BYPASS_GROUP);
        if ($value eq 'yes') {
            {
                osh_info "Bypassing sshd PAM auth usage for this account...";
                if ($fnret) {
                    osh_info "... no change was required";
                    $result{$jsonkey} = R('OK_NO_CHANGE');
                    last;
                }

                $fnret = OVH::Bastion::sys_addmembertogroup(
                    user         => $Account->sysUser,
                    group        => OVH::Bastion::PAM_AUTH_BYPASS_GROUP,
                    noisy_stderr => 1
                );
                if (!$fnret) {
                    osh_warn "... error while setting the bypass option";
                    $result{$jsonkey} = R('ERR_ADDING_TO_GROUP');
                    $nbErrors++;
                    last;
                }

                osh_info "... done, this account will no longer use PAM for authentication";
                $result{$jsonkey} = R('OK');
            }
        }
        elsif ($value eq 'no') {
            {
                osh_info "Removing bypass of sshd PAM auth usage for this account...";
                if (!$fnret) {
                    osh_info "... no change was required";
                    $result{$jsonkey} = R('OK_NO_CHANGE');
                    last;
                }

                $fnret = OVH::Bastion::sys_delmemberfromgroup(
                    user         => $Account->sysUser,
                    group        => OVH::Bastion::PAM_AUTH_BYPASS_GROUP,
                    noisy_stderr => 1
                );
                if (!$fnret) {
                    osh_warn "... error while removing the bypass option";
                    $result{$jsonkey} = R('ERR_REMOVING_FROM_GROUP');
                    $nbErrors++;
                    last;
                }

                osh_info "... done, this account will no longer bypass PAM for authentication";
                $result{$jsonkey} = R('OK');
            }
        }
    }
    elsif ($key eq 'pubkey-auth-optional') {
        $fnret = OVH::Bastion::is_user_in_group(
            user  => $Account->sysUser,
            group => OVH::Bastion::OSH_PUBKEY_AUTH_OPTIONAL_GROUP
        );
        if ($value eq 'yes') {
            {
                osh_info "Making public key authentication optional for this account...";
                if ($fnret) {
                    osh_info "... no change was required";
                    $result{$jsonkey} = R('OK_NO_CHANGE');
                    last;
                }

                $fnret = OVH::Bastion::sys_addmembertogroup(
                    user         => $Account->sysUser,
                    group        => OVH::Bastion::OSH_PUBKEY_AUTH_OPTIONAL_GROUP,
                    noisy_stderr => 1
                );
                if (!$fnret) {
                    osh_warn "... error while setting the optional pubkey option";
                    $result{$jsonkey} = R('ERR_ADDING_TO_GROUP');
                    $nbErrors++;
                    last;
                }

                osh_info("... done, this account can now authenticate with or without a pubkey ",
                    "if a password/TOTP is set");
                $result{$jsonkey} = R('OK');
            }
        }
        elsif ($value eq 'no') {
            {
                osh_info "Making pubkey authentication mandatory for this account...";
                if (!$fnret) {
                    osh_info "... no change was required";
                    $result{$jsonkey} = R('OK_NO_CHANGE');
                    last;
                }

                $fnret = OVH::Bastion::sys_delmemberfromgroup(
                    user         => $Account->sysUser,
                    group        => OVH::Bastion::OSH_PUBKEY_AUTH_OPTIONAL_GROUP,
                    noisy_stderr => 1
                );
                if (!$fnret) {
                    osh_warn "... error while removing the optional pubkey option";
                    $result{$jsonkey} = R('ERR_REMOVING_FROM_GROUP');
                    $nbErrors++;
                    last;
                }

                osh_info "... done, this account now requires a pubkey to authenticate";
                $result{$jsonkey} = R('OK');
            }
        }
    }
    elsif ($key eq 'mfa-password-required') {
        _mfa_toggle(
            $key, $value, 'Password',
            OVH::Bastion::MFA_PASSWORD_REQUIRED_GROUP,
            OVH::Bastion::MFA_PASSWORD_BYPASS_GROUP
        );
    }
    elsif ($key eq 'mfa-totp-required') {
        _mfa_toggle($key, $value, 'TOTP', OVH::Bastion::MFA_TOTP_REQUIRED_GROUP, OVH::Bastion::MFA_TOTP_BYPASS_GROUP);
    }
    elsif ($key eq 'egress-strict-host-key-checking') {
        osh_info "Changing the egress StrictHostKeyChecking option for this account...";
        if (not grep { $value eq $_ } qw{ yes accept-new no ask default bypass }) {
            osh_warn "Invalid parameter '$value', skipping";
            $result{$jsonkey} = R('ERR_INVALID_PARAMETER');
            $nbErrors++;
        }
        else {
            my $hostsFile;    # undef, aka remove UserKnownHostsFile option
            if ($value eq 'bypass') {

                # special case: for 'bypass', we set Strict to no and UserKnownHostsFile to /dev/null
                $value     = 'no';
                $hostsFile = '/dev/null';
            }
            elsif ($value eq 'default') {

                # special case: for 'default', we actually remove the StrictHostKeyChecking option
                undef $value;
            }
            $fnret = $Account->setSshConfig(key => "StrictHostKeyChecking", value => $value);
            $nbErrors++ if $fnret->is_err;
            $result{$jsonkey} = $fnret;
            if ($fnret) {
                $fnret = $Account->setSshConfig(key => "UserKnownHostsFile", value => $hostsFile);
                $result{$jsonkey} = $fnret;
                $nbErrors++ if $fnret->is_err;
            }
            if ($fnret) {
                osh_info "... modification done";
            }
            else {
                osh_warn "... error while setting StrictHostKeyChecking policy: " . $fnret->msg;
            }
        }
    }
    elsif ($key eq 'personal-egress-mfa-required') {
        osh_info
          "Changing the MFA policy for egress connections using the personal access (and keys) of the account...";
        if (not grep { $value eq $_ } qw{ password totp any none }) {
            osh_warn "Invalid parameter '$value', skipping";
            $result{$jsonkey} = R('ERR_INVALID_PARAMETER');
            $nbErrors++;
        }
        else {
            $fnret = $Account->getConfig("private/personal_egress_mfa_required");
            $result{$jsonkey} = $fnret;
            if ($fnret) {
                osh_info "... modification done";
            }
            else {
                osh_warn "... error while setting MFA policy: " . $fnret->msg;
            }
        }
    }
    elsif ($key eq 'max-inactive-days') {
        osh_info "Changing the account expiration policy...";
        if ($value !~ /^(?:\d+|-1)$/) {
            osh_warn "Invalid parameter '$value', skipping";
            $result{$jsonkey} = R('ERR_INVALID_PARAMETER');
            $nbErrors++;
        }
        else {
            if ($value < 0) {
                $fnret = $Account->deleteConfig("public/max_inactive_days");
            }
            else {
                $fnret = $Account->setConfig("public/max_inactive_days", $value);
            }
            $result{$jsonkey} = $fnret;
            if ($fnret) {
                osh_info "... modification done";
            }
            else {
                osh_warn "... error while setting the account expiration policy: " . $fnret->msg;
            }
        }
    }
}

if ($nbErrors) {
    HEXIT('ERR_ONE_OR_MORE_ERRORS_OCCURRED', value => \%result, msg => "One or more errors occurred");
}
else {
    HEXIT('OK', value => \%result);
}
